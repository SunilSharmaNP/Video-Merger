"""
Video Merge Bot - Complete Working Version (thumbnail logic removed)
"""

import uvloop
uvloop.install()

import asyncio
import logging
import os
import sys
from pyrogram import Client # Pyrogram Client ‡§ï‡•ã ‡§Ø‡§π‡§æ‡§Ç ‡§∏‡•Ä‡§ß‡•á ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§Ø‡§π bot.client ‡§∏‡•á ‡§Ü‡§§‡§æ ‡§π‡•à‡•§
                           # ‡§π‡§æ‡§≤‡§æ‡§Å‡§ï‡§ø, ‡§Ø‡§π ‡§ï‡•ã‡§à ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§¨‡§∏ ‡§è‡§ï ‡§Ö‡§®‡§æ‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§π‡•à‡•§

# --- Logging Setup ---
# Logging configuration ‡§ï‡•ã ‡§è‡§ï ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§® ‡§Æ‡•á‡§Ç encapsulate ‡§ï‡§∞‡§®‡§æ ‡§Ö‡§ß‡§ø‡§ï ‡§∏‡•ç‡§µ‡§ö‡•ç‡§õ ‡§π‡•à‡•§
def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('logs/bot.log'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    return logging.getLogger(__name__)

LOGGER = setup_logging()
# --- End Logging Setup ---

async def main():
    """Main function to start the bot"""
    bot_client = None # bot_client ‡§ï‡•ã ‡§™‡§π‡§≤‡•á ‡§π‡•Ä ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§∞ ‡§≤‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø finally ‡§¨‡•ç‡§≤‡•â‡§ï ‡§Æ‡•á‡§Ç ‡§á‡§∏‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡•á‡•§
    try:
        LOGGER.info("üöÄ Starting Video Merge Bot...")
        
        # Create necessary directories
        LOGGER.info("Creating necessary directories...")
        os.makedirs("downloads", exist_ok=True)
        os.makedirs("merged", exist_ok=True)
        os.makedirs("data", exist_ok=True)
        os.makedirs("logs", exist_ok=True)
        # Removed: os.makedirs("thumbnails", exist_ok=True)
        
        # Import and start bot
        # 'bot.client' ‡§∏‡•á 'bot_client' ‡§ï‡•ã ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
        from bot.client import bot_client
        
        await bot_client.start()
        
        # Get bot information
        me = await bot_client.get_me()
        LOGGER.info(f"‚úÖ Bot @{me.username} started successfully with ID: {me.id}!")
        
        # Keep the bot running indefinitely until stopped
        await asyncio.Event().wait()
        
    except Exception as e:
        LOGGER.error(f"‚ùå Failed to start bot: {e}", exc_info=True) # exc_info=True ‡§∏‡•ç‡§ü‡•à‡§ï ‡§ü‡•ç‡§∞‡•á‡§∏ ‡§™‡•ç‡§∞‡§ø‡§Ç‡§ü ‡§ï‡§∞‡•á‡§ó‡§æ‡•§
        sys.exit(1)
    finally:
        if bot_client and bot_client.is_running:
            LOGGER.info("üëã Stopping bot client...")
            await bot_client.stop()
            LOGGER.info("Bot client stopped.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        LOGGER.info("üõë Bot stopped by user (KeyboardInterrupt)")
    except Exception as e:
        LOGGER.error(f"‚ùå Bot crashed outside main: {e}", exc_info=True)
        sys.exit(1)
